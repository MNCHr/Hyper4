[+ std_header +]
[+ this_header +]

action init_program_state(action_ID, match_ID, next_table, primitive, primitive_subtype) {
  modify_field(meta_primitive_state.action_ID, action_ID);
  modify_field(meta_primitive_state.match_ID, match_ID);
  modify_field(meta_primitive_state.primitive_index, 1);
  modify_field(meta_ctrl.next_table, next_table);
  modify_field(meta_primitive_state.primitive, primitive);
  modify_field(meta_primitive_state.subtype, primitive_subtype);
  modify_field(meta_ctrl.stage_state, CONTINUE);
}

[+ sloop +]
table t[+X+]_matchless {
  reads {
    meta_ctrl.program : exact;
  }
  actions {
    init_program_state;
  }
}

table t[+X+]_extracted_exact {
  reads {
    meta_ctrl.program : exact;
    extracted.data : ternary;
  }
  actions {
    init_program_state;
  }
}

table t[+X+]_metadata_exact {
  reads {
    meta_ctrl.program : exact;
    tmeta.data : ternary;
  }
  actions {
    init_program_state;
  }
}

table t[+X+]_extracted_valid {
  reads {
    meta_ctrl.program : exact;
    extracted.validbits : ternary;
  }
  actions {
    init_program_state;
  }
}

table t[+X+]_stdmeta_ingress_port_exact {
  reads {
    meta_ctrl.program : exact;
    standard_metadata.ingress_port : exact;
  }
  actions {
    init_program_state;
  }
}

table t[+X+]_stdmeta_packet_length_exact {
  reads {
    meta_ctrl.program : exact;
    standard_metadata.packet_length : exact;
  }
  actions {
    init_program_state;
  }
}

table t[+X+]_stdmeta_instance_type_exact {
  reads {
    meta_ctrl.program : exact;
    standard_metadata.instance_type : exact;
  }
  actions {
    init_program_state;
  }
}

table t[+X+]_stdmeta_egress_spec_exact {
  reads {
    meta_ctrl.program : exact;
    standard_metadata.egress_spec : exact;
  }
  actions {
    init_program_state;
  }
}
[+ endsloop +]

[+ sloop +]
control match_[+X+] {
  if(meta_ctrl.next_table == EXTRACTED_EXACT) {
    apply(t[+X+]_extracted_exact);
  }
  else if(meta_ctrl.next_table == METADATA_EXACT) {
    apply(t[+X+]_metadata_exact);
  }
  else if(meta_ctrl.next_table == EXTRACTED_VALID) {
    apply(t[+X+]_extracted_valid);
  }
  else if(meta_ctrl.next_table == MATCHLESS) {
    apply(t[+X+]_matchless);
  }
  else if(meta_ctrl.next_table == STDMETA_INGRESS_PORT_EXACT) {
    apply(t[+X+]_stdmeta_ingress_port_exact);
  }
  else if(meta_ctrl.next_table == STDMETA_PACKET_LENGTH_EXACT) {
    apply(t[+X+]_stdmeta_packet_length_exact);
  }
  else if(meta_ctrl.next_table == STDMETA_INSTANCE_TYPE_EXACT) {
    apply(t[+X+]_stdmeta_instance_type_exact);
  }
  else if(meta_ctrl.next_table == STDMETA_EGRESS_SPEC_EXACT) {
    apply(t[+X+]_stdmeta_egress_spec_exact);
  }
}
[+ endsloop +]
